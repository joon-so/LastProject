#include "Astar.h"

// 장애물 배열
struct obt_postion12 {
	short x;
	short y;
};
struct obt_postion12 oob_positions[2000] = { {41,267},{34,600},{269,324},{278,658},{362,664},{105,145},{181,27},{161,491},{195,42},{627,536},{191,604},{402,153},{292,482},{621,516},{118,295},{547,26},{71,338},{469,312},{467,399},{235,94},{3,11},{522,233},{173,464},{441,11},{253,568},{347,344},{462,557},{437,259},{323,641},{229,78},{416,235},{490,442},{288,6},{640,542},{364,248},{146,5},{490,429},{570,650},{306,301},{593,48},{29,23},{284,354},{556,640},{66,376},{631,408},{144,239},{126,123},{637,538},{18,682},{529,441},{633,315},{439,258},{304,130},{677,206},{173,686},{121,45},{324,172},{670,229},{177,173},{197,412},{186,690},{61,436},{655,267},{555,174},{531,152},{50,450},{141,24},{666,630},{307,91},{507,137},{57,387},{453,583},{245,509},{9,658},{421,388},{122,446},{206,430},{313,468},{200,391},{562,255},{610,59},{324,237},{548,183},{295,541},{102,550},{491,36},{274,520},{396,221},{48,99},{68,684},{581,534},{53,599},{518,638},{600,288},{627,467},{228,193},{148,83},{307,321},{310,317},{413,414},{309,616},{35,651},{300,349},{419,56},{398,203},{624,508},{244,409},{289,502},{395,185},{293,343},{423,187},{614,403},{448,0},{158,318},{280,196},{98,581},{689,498},{9,557},{172,522},{338,392},{438,379},{690,257},{258,591},{215,488},{256,311},{102,534},{472,455},{28,246},{462,686},{675,433},{469,542},{44,16},{181,498},{522,451},{221,99},{57,476},{592,589},{175,212},{500,410},{3,269},{361,688},{101,689},{555,323},{102,85},{382,485},{488,626},{617,657},{32,132},{669,54},{521,389},{376,529},{268,692},{425,55},{634,449},{441,412},{45,560},{18,253},{39,523},{179,96},{587,629},{149,637},{266,349},{193,95},{497,116},{286,5},{688,182},{555,534},{614,501},{516,371},{186,363},{113,555},{385,453},{212,308},{432,645},{113,456},{321,658},{546,682},{481,644},{96,622},{129,61},{635,150},{673,666},{144,659},{392,539},{453,424},{254,110},{545,349},{586,613},{274,22},{68,18},{587,105},{458,391},{402,125},{577,214},{214,624},{634,674},{572,559},{633,70},{487,297},{518,477},{273,70},{363,568},{392,685},{302,80},{513,627},{602,599},{427,525},{143,524},{523,572},{461,181},{203,132},{5,293},{325,431},{92,142},{422,486},{464,200},{287,660},{13,174},{270,470},{235,33},{111,560},{696,467},{285,650},{140,394},{595,624},{19,25},{676,694},{258,402},{571,66},{478,193},{51,284},{318,464},{119,52},{0,587},{260,526},{610,557},{670,15},{476,127},{143,358},{164,209},{182,286},{165,687},{177,474},{525,427},{29,428},{223,520},{602,262},{123,96},{237,661},{395,325},{564,560},{602,416},{130,26},{311,671},{111,347},{153,520},{390,224},{88,63},{40,551},{462,529},{100,213},{58,78},{665,407},{277,500},{158,139},{203,160},{457,224},{177,208},{113,187},{201,450},{460,28},{393,84},{505,240},{311,4},{235,156},{472,650},{623,485},{256,116},{226,257},{126,57},{637,171},{69,661},{296,422},{217,312},{117,496},{385,241},{623,329},{429,365},{259,532},{596,455},{153,162},{84,334},{354,172},{457,369},{132,163},{507,383},{211,435},{267,448},{475,338},{123,442},{654,211},{341,575},{459,325},{421,370},{226,434},{505,283},{50,598},{579,301},{293,134},{237,634},{656,593},{376,505},{662,48},{481,300},{413,541},{255,355},{542,262},{311,77},{124,478},{352,243},{296,73},{240,213},{175,472},{218,610},{317,232},{112,595},{569,31},{440,588},{685,190},{597,489},{90,445},{453,414},{451,140},{344,58},{335,359},{692,605},{64,281},{503,329},{675,308},{592,397},{49,156},{361,127},{167,141},{229,440},{513,474},{301,477},{615,283},{513,192},{624,1},{292,359},{570,528},{27,584},{275,586},{98,470},{687,47},{404,503},{221,263},{106,263},{610,471},{189,40},{264,342},{619,613},{591,404},{318,132},{50,5},{75,139},{303,222},{98,47},{284,348},{171,364},{513,575},{545,12},{46,478},{369,562},{119,685},{289,544},{65,340},{145,308},{318,570},{501,323},{132,672},{552,587},{570,363},{501,303},{423,27},{400,369},{15,665},{28,543},{147,688},{143,37},{9,563},{149,481},{188,142},{608,560},{221,358},{554,588},{146,690},{249,243},{430,420},{48,467},{336,483},{535,26},{485,38},{53,429},{24,348},{323,559},{57,266},{44,255},{218,526},{211,25},{55,201},{149,396},{384,415},{464,242},{375,413},{42,396},{248,572},{126,606},{273,629},{204,405},{326,412},{475,693},{465,636},{36,441},{14,394},{556,352},{136,38},{182,655},{15,431},{30,341},{625,611},{437,686},{90,250},{62,634},{393,553},{416,152},{8,262},{533,554},{203,534},{403,256},{148,624},{417,13},{509,228},{500,80},{318,58},{250,355},{561,564},{3,176},{243,309},{202,61},{489,448},{582,353},{574,120},{502,623},{331,469},{378,659},{108,219},{171,603},{245,681},{604,492},{485,113},{398,689},{122,338},{137,110},{661,634},{608,161},{459,193},{115,69},{437,169},{58,0},{671,364},{417,115},{55,115},{130,239},{112,588},{82,554},{685,410},{684,274},{680,415},{51,241},{615,279},{310,698},{673,88},{177,632},{556,689},{213,208},{341,390},{323,363},{28,684},{278,200},{171,485},{274,371},{133,467},{253,295},{668,525},{576,229},{650,498},{509,493},{486,680},{316,349},{67,128},{79,164},{21,5},{426,516},{516,426},{666,387},{381,364},{640,86},{421,462},{21,464},{609,115},{402,473},{324,141},{545,262},{423,231},{606,368},{218,2},{407,507},{381,312},{136,30},{314,209},{584,456},{390,293},{596,452},{354,145},{8,248},{491,412},{231,14},{339,258},{222,304},{695,352},{69,479},{38,523},{618,366},{159,298},{486,196},{462,33},{258,122},{446,192},{437,425},{147,58},{302,7},{598,530},{592,600},{278,499},{152,148},{582,540},{315,375},{362,467},{636,197},{618,297},{628,551},{216,430},{249,125},{658,229},{20,440},{160,447},{662,255},{375,92},{661,254},{298,46},{314,346},{188,669},{238,363},{375,15},{321,475},{215,228},{634,670},{205,364},{657,262},{161,424},{649,669},{330,423},{350,333},{525,410},{137,236},{137,578},{493,636},{614,164},{91,349},{235,405},{37,204},{237,523},{664,170},{408,468},{381,85},{52,173},{652,494},{76,26},{396,572},{649,640},{474,619},{243,411},{541,689},{19,665},{305,585},{116,650},{215,509},{564,66},{93,674},{209,200},{95,473},{189,561},{372,468},{58,131},{368,526},{510,622},{674,379},{110,452},{682,191},{95,164},{174,664},{202,255},{260,474},{672,221},{222,347},{577,689},{405,95},{294,250},{243,54},{381,312},{472,339},{128,312},{662,367},{608,215},{508,423},{559,534},{304,86},{119,258},{345,206},{466,500},{167,192},{87,532},{456,174},{647,121},{83,322},{631,276},{583,348},{123,482},{318,76},{120,311},{682,56},{590,525},{124,186},{77,569},{443,534},{277,268},{268,291},{696,83},{28,27},{26,471},{197,112},{503,527},{208,645},{408,185},{138,437},{543,313},{101,450},{628,11},{550,149},{692,54},{469,681},{165,667},{213,193},{434,272},{672,430},{401,442},{277,577},{570,2},{364,681},{490,423},{137,323},{679,495},{569,227},{142,510},{182,558},{226,387},{270,328},{51,158},{213,60},{583,286},{642,210},{272,128},{234,241},{418,3},{167,365},{438,481},{157,350},{614,398},{458,561},{163,556},{507,678},{589,535},{65,575},{586,686},{133,660},{30,148},{528,92},{533,40},{466,335},{210,399},{637,192},{482,328},{652,169},{444,94},{308,152},{447,632},{435,208},{464,697},{143,349},{315,241},{189,0},{212,548},{423,251},{674,633},{491,600},{254,190},{497,19},{280,178},{331,344},{540,187},{199,125},{83,638},{492,593},{252,511},{160,434},{440,697},{685,329},{40,605},{91,92},{610,249},{578,379},{171,177},{73,593},{220,497},{526,476},{190,282},{278,659},{118,589},{159,649},{324,672},{580,408},{667,408},{177,303},{670,407},{196,174},{422,11},{119,61},{556,290},{363,583},{416,332},{252,641},{54,513},{62,596},{60,315},{404,499},{536,480},{98,432},{387,384},{240,17},{206,270},{241,682},{49,23},{258,205},{221,295},{296,116},{278,378},{279,558},{277,150},{7,629},{281,195},{578,176},{453,599},{584,165},{293,308},{572,43},{529,514},{368,155},{691,373},{522,448},{51,486},{44,346},{77,617},{629,516},{274,391},{69,512},{446,593},{691,15},{349,257},{340,152},{236,151},{387,426},{162,155},{83,694},{80,697},{265,465},{413,161},{678,78},{78,140},{411,447},{345,170},{575,189},{250,549},{533,565},{514,482},{407,132},{496,267},{522,682},{310,141},{231,87},{405,179},{21,238},{551,547},{408,546},{576,559},{89,322},{366,86},{655,628},{214,660},{553,577},{548,603},{361,31},{382,555},{197,406},{352,421},{496,381},{121,655},{547,524},{118,35},{176,374},{459,498},{174,153},{622,135},{243,188},{453,632},{547,680},{326,478},{150,101},{461,199},{555,463},{116,73},{61,145},{173,274},{150,553},{481,87},{599,610},{443,665},{172,429},{181,12},{176,181},{547,290},{571,405},{172,632},{489,220},{65,31},{558,93},{406,678},{148,106},{571,666},{596,597},{220,594},{129,88},{9,484},{69,278},{617,515},{526,184},{68,406},{28,197},{118,590},{499,585},{486,299},{520,410},{71,413},{115,485},{318,80},{631,267},{687,144},{86,507},{160,327},{74,531},{152,171},{468,493},{285,337},{511,104},{77,406},{68,322},{513,100},{542,37},{638,388},{355,689},{147,381},{493,484},{487,261},{193,517},{401,682},{47,265},{253,404},{384,195},{225,121},{464,81},{672,406},{156,543},{193,480},{680,168},{411,413},{668,451},{616,179},{68,240},{31,333},{679,363},{359,53},{636,695},{565,674},{20,235},{480,576},{255,125},{571,308},{259,56},{2,332},{205,640},{375,562},{485,262},{80,436},{297,402},{8,280},{440,176},{658,693},{40,146},{174,273},{197,480},{235,572},{300,7},{555,366},{641,488},{581,368},{315,496},{125,309},{312,636},{255,562},{543,42},{21,422},{12,148},{118,68},{617,614},{150,690},{535,159},{369,195},{403,240},{279,399},{405,291},{461,281},{152,353},{233,529},{587,42},{353,483},{220,414},{518,344},{263,229},{352,664},{569,370},{305,47},{194,487},{526,476},{323,240},{679,190},{388,210},{571,445},{521,470},{583,489},{155,78},{279,106},{662,535},{387,596},{333,688},{335,179},{593,90},{462,65},{501,205},{607,67},{569,334},{471,57},{398,45},{297,218},{438,144},{372,163},{28,564},{101,23},{190,604},{101,427},{697,592},{171,63},{601,663},{21,65},{621,345},{410,495},{641,322},{312,451},{615,355},{593,338},{579,282},{208,54},{322,507},{445,638},{144,590},{539,54},{104,423},{525,478},{24,481},{230,333},{223,294},{430,646},{87,45},{605,216},{150,189},{38,263},{135,697},{9,630},{124,508},{137,674},{420,72},{493,355},{434,461},{256,306},{484,75},{382,119},{441,332},{184,179},{379,83},{367,36},{325,318},{137,528},{619,277},{237,91},{256,395},{660,201},{393,632},{36,380},{175,307},{184,74},{319,190},{176,641},{551,629},{190,574},{672,91},{289,387},{690,439},{193,253},{263,181},{3,405},{376,279},{295,539},{268,698},{83,539},{115,321},{593,426},{322,38},{328,681},{599,578},{691,323},{343,334},{243,349},{602,307},{202,641},{187,646},{491,137},{213,200},{416,190},{562,535},{426,510},{277,182},{360,589},{105,574},{563,422},{695,166},{260,438},{388,111},{245,367},{225,267},{589,42},{463,547},{402,217},{699,523},{426,403},{648,51},{170,236},{358,67},{56,305},{331,562},{219,275},{56,531},{695,344},{491,203},{588,15},{450,419},{672,591},{683,333},{375,142},{469,100},{454,178},{85,157},{133,193},{690,303},{550,433},{222,471},{11,90},{238,641},{158,147},{252,558},{479,102},{483,90},{202,168},{222,95},{535,508},{461,642},{494,599},{88,578},{542,557},{141,447},{469,245},{180,413},{264,510},{461,185},{473,204},{362,503},{102,569},{254,29},{52,574},{249,230},{144,344},{449,118},{265,463},{652,73},{270,331},{447,511},{269,398},{698,103},{52,479},{53,443},{522,288},{163,634},{50,222},{240,211},{392,51},{580,77},{316,476},{278,320},{615,648},{198,679},{135,57},{83,262},{2,262},{520,170},{122,173},{641,86},{188,417},{217,492},{398,67},{549,65},{589,632},{419,681},{603,430},{428,431},{589,52},{430,272},{264,107},{395,228},{281,290},{10,277},{271,36},{159,343},{40,333},{437,93},{230,674},{393,82},{3,661},{590,62},{607,697},{351,223},{490,617},{340,3},{666,683},{561,259},{45,86},{451,565},{1,40},{409,97},{683,550},{558,21},{175,481},{187,471},{87,699},{604,479},{38,200},{530,361},{218,205},{540,628},{659,422},{398,260},{498,335},{681,514},{667,293},{596,261},{46,38},{670,238},{476,555},{417,271},{660,152},{458,33},{55,365},{26,301},{234,159},{593,448},{673,592},{93,333},{37,303},{190,211},{394,168},{427,498},{289,548},{379,447},{649,131},{669,75},{398,249},{236,99},{523,43},{331,654},{461,234},{285,167},{316,193},{604,466},{153,208},{223,484},{692,267},{248,269},{630,11},{214,690},{527,643},{204,99},{374,195},{506,258},{89,58},{509,389},{247,40},{318,264},{475,26},{589,403},{666,512},{540,670},{676,195},{641,586},{151,109},{487,483},{85,290},{450,486},{555,181},{128,302},{477,62},{524,65},{372,132},{85,428},{346,589},{178,383},{425,265},{460,145},{478,221},{555,420},{327,273},{634,651},{275,36},{234,1},{637,210},{374,590},{56,371},{580,435},{645,482},{425,518},{273,512},{437,98},{105,162},{317,292},{639,47},{446,203},{131,315},{139,658},{529,545},{594,399},{45,272},{675,162},{572,473},{380,38},{297,42},{208,303},{177,525},{534,1},{678,182},{569,436},{178,439},{138,521},{626,163},{277,575},{424,81},{400,261},{162,602},{248,595},{684,216},{437,407},{693,284},{144,159},{121,58},{143,168},{177,119},{457,641},{491,64},{223,615},{372,429},{141,515},{115,636},{257,459},{0,152},{193,441},{629,548},{327,598},{124,524},{374,633},{485,338},{270,562},{429,184},{9,178},{623,485},{0,624},{193,5},{312,365},{167,7},{177,484},{4,90},{34,391},{621,585},{434,690},{242,498},{386,518},{221,324},{197,376},{454,269},{608,327},{593,168},{66,2},{338,0},{319,318},{190,284},{239,456},{608,432},{478,214},{487,239},{74,520},{327,454},{588,441},{698,342},{102,221},{4,646},{56,309},{433,208},{161,233},{386,104},{485,342},{642,460},{461,120},{143,478},{487,113},{463,391},{334,115},{656,361},{512,411},{59,151},{538,70},{224,607},{307,84},{451,1},{489,458},{41,390},{213,312},{155,60},{93,72},{202,476},{243,373},{666,351},{575,528},{532,261},{569,303},{529,307},{592,351},{453,392},{170,219},{572,307},{94,405},{440,83},{262,409},{607,538},{160,571},{671,354},{547,314},{523,229},{489,466},{387,356},{32,470},{539,366},{122,283},{460,53},{205,491},{559,186},{187,429},{42,317},{345,456},{88,252},{354,366},{633,460},{319,431},{438,267},{576,98},{514,220},{453,207},{369,416},{622,242},{307,63},{360,147},{493,630},{517,643},{576,114},{526,317},{634,320},{171,192},{564,254},{666,693},{564,675},{400,312},{100,551},{276,79},{443,377},{289,361},{185,572},{234,444},{161,363},{504,346},{88,8},{257,30},{223,164},{574,146},{537,581},{118,11},{192,91},{332,523},{161,191},{661,30},{498,569},{491,0},{179,317},{217,314},{195,41},{336,167},{28,653},{609,673},{481,303},{669,516},{483,167},{485,402},{330,357},{681,167},{610,466},{187,571},{677,445},{564,638},{371,647},{215,392},{11,457},{5,53},{171,280},{340,130},{375,520},{590,77},{498,486},{604,289},{31,344},{688,10},{518,319},{59,327},{609,119},{479,316},{0,396},{53,258},{530,93},{6,449},{154,472},{260,394},{154,433},{146,29},{671,628},{59,541},{21,288},{266,133},{85,170},{129,61},{460,108},{582,462},{306,578},{79,497},{187,238},{469,683},{40,395},{266,433},{209,57},{217,234},{553,635},{358,493},{343,693},{366,551},{640,594},{337,274},{412,497},{451,595},{117,392},{292,637},{230,613},{96,10},{189,28},{209,86},{244,640},{482,569},{520,93},{692,262},{214,627},{207,594},{305,13},{11,13},{393,64},{303,295},{262,381},{346,509},{348,68},{24,111},{254,35},{427,633},{240,462},{427,277},{17,240},{342,400},{400,258},{476,354},{435,330},{231,295},{37,223},{422,127},{29,111},{111,554},{280,353},{493,321},{485,628},{643,200},{55,171},{170,452},{275,631},{340,534},{540,286},{134,248},{139,65},{196,512},{262,552},{631,187},{664,357},{248,156},{570,550},{582,301},{693,299},{232,144},{131,75},{204,150},{326,66},{538,201},{23,543},{441,580},{95,218},{159,663},{28,29},{388,154},{213,479},{369,666},{679,277},{537,602},{15,192},{323,72},{48,223},{653,548},{595,697},{308,508},{611,693},{665,181},{402,110},{328,656},{405,565},{523,469},{515,653},{305,584},{78,645},{140,133},{385,300},{468,194},{533,585},{348,81},{532,156},{510,372},{582,101},{406,135},{360,271},{127,137},{643,668},{233,495},{471,603},{242,511},{179,234},{512,93},{530,161},{134,458},{226,306},{291,443},{588,127},{519,584},{324,193},{335,624},{94,82},{467,227},{305,646},{486,489},{240,37},{450,559},{478,256},{477,303},{42,0},{411,325},{143,595},{16,15},{104,6},{368,141},{235,698},{625,313},{23,612},{118,257},{196,639},{86,594},{146,443},{22,311},{180,355},{458,247},{170,290},{373,127},{613,654},{396,572},{650,441},{441,46},{425,213},{24,429},{295,203},{694,293},{167,487},{440,579},{241,625},{634,660},{600,7},{421,392},{93,217},{17,103},{443,393},{139,311},{325,228},{378,248},{50,492},{544,154},{523,553},{136,47},{346,126},{661,404},{438,71},{286,305},{399,356},{528,567},{251,619},{391,666},{117,646},{293,387},{21,512},{567,299},{244,497},{501,528},{442,104},{368,368},{41,196},{62,220},{244,618},{525,219},{84,674},{484,659},{549,214},{95,603},{132,551},{137,214},{663,451},{519,490},{17,683},{418,684},{652,86},{469,348},{237,297},{424,68},{427,148},{493,582},{571,369},{193,577},{314,204},{484,143},{295,211},{593,192},{498,590},{99,190},{93,374},{149,474},{214,573},{269,518},{265,33},{538,311},{652,163},{208,649},{688,345},{631,420},{306,371},{468,121},{558,657},{547,82},{38,322},{223,206},{506,389},{656,245},{451,623},{118,50},{697,636},{91,106},{310,613},{651,680},{544,243},{41,45},{578,49},{5,14},{185,127},{224,404},{356,117},{627,555},{302,286},{568,498},{579,411},{589,258},{190,675},{410,332},{489,696},{50,12},{522,629},{672,636},{77,653},{676,170},{685,452},{351,297},{151,301},{435,593},{372,416},{416,128},{111,625},{638,696},{39,344},{356,226},{302,158},{88,121},{186,108},{377,28},{279,347},{649,580},{645,628},{62,626},{519,177},{391,547},{485,131},{406,284},{254,669},{9,656},{21,545},{165,616},{160,397},{135,290},{77,49},{5,186},{288,475},{543,577},{330,487},{655,82},{53,300},{454,289},{288,15},{108,510},{240,499},{197,607},{54,304},{537,685},{599,692},{213,412},{482,383},{651,29},{337,133},{500,364},{583,657},{568,310},{268,208},{541,432},{537,484},{299,501},{469,583},{556,92},{640,187},{312,510},{220,135},{263,115},{697,477},{674,334},{253,633},{178,186},{424,634},{575,649},{612,384},{524,492},{204,122},{555,13},{462,673},{484,360},{322,153},{497,622},{150,337},{617,506},{31,497},{205,536},{557,299},{290,498},{285,447},{384,592},{525,596},{455,328},{638,542},{428,395},{642,637},{606,467},{153,693},{505,346},{109,624},{254,65},{339,306},{409,92},{399,675},{236,661},{347,218},{513,127},{312,596},{209,541},{530,690},{634,215},{686,23},{366,644},{536,337},{516,293},{549,171},{344,377},{385,300},{590,485},{325,318},{468,206},{629,208},{541,225},{136,80},{16,370},{684,47},{28,636},{604,200},{523,464},{11,640},{250,304},{383,66},{41,570},{345,6},{688,156},{607,566},{257,278},{199,74},{155,691},{590,432},{58,496},{517,290},{467,307},{534,246},{262,502},{539,626},{195,106},{614,550},{386,379},{276,622},{579,101},{412,76},{364,357},{370,438},{512,344},{461,180},{0,543},{156,561},{547,339},{208,190},{652,279},{418,419},{207,584},{47,577},{275,413},{509,71},{642,239},{36,421},{501,134},{629,358},{36,469},{497,504},{598,2},{5,538},{332,465},{616,481},{179,623},{327,371},{513,582},{540,316},{488,619},{689,613},{59,551},{71,183},{164,438},{212,384},{59,401},{474,33},{159,414},{349,295},{522,41},{116,677},{352,565},{291,138},{10,667},{355,487},{624,22},{339,141},{348,204},{534,468},{641,472},{468,374},{276,237},{333,441},{145,518},{215,574},{352,146},{556,324},{666,181},{444,40},{634,596},{676,527},{505,618},{91,141},{165,91},{71,659},{600,617},{616,543},{624,264},{5,457},{2,666},{175,546},{132,389},{446,45},{403,552},{401,626},{453,184},{49,250},{605,546},{325,270},{336,595},{693,123},{632,156},{496,410},{276,92},{550,590},{495,552},{550,615},{236,661},{260,184},{329,434},{450,82},{6,536},{384,290},{617,482} };

Astar::Node::Node()
{

}

Astar::Node::Node(int _x, int _y, Node* _pParent, Coordinate _EndPoint)
{
	point.x = _x;
	point.y = _y;
	pParent = _pParent;
	end = _EndPoint;

	if (pParent == NULL) 
	{
		G = 0;
	}
	else if ( 
		(pParent->point.x == point.x - 1 && pParent->point.y == point.y) || 
		(pParent->point.x == point.x + 1 && pParent->point.y == point.y) || 
		(pParent->point.x == point.x && pParent->point.y == point.y - 1) ||
		(pParent->point.x == point.x && pParent->point.y == point.y + 1)) 
	{
		G = pParent->G + 10;
	}
	else if ( 
		(pParent->point.x == point.x - 1 && pParent->point.y == point.y - 1) || 
		(pParent->point.x == point.x - 1 && pParent->point.y == point.y + 1) || 
		(pParent->point.x == point.x + 1 && pParent->point.y == point.y - 1) || 
		(pParent->point.x == point.x + 1 && pParent->point.y == point.y + 1)) 
	{
		G = pParent->G + 14;
	}
	else {
		cout << " 부모 설정 오류 " << endl;
		F = -100000;  H = -100000; G = -100000;
	}

	H = (abs(end.x - point.x) + abs(end.y - point.y)) * 10;

	F = G + H;
}

Astar::Node::~Node()
{

}

Astar::Map::Map()
{
	// 맵의 크기를 불러옴
	char csizeX[4], csizeY[4];

	sizeX =800; sizeY = 800;
	map = new int* [sizeX]; // 행 할당
	for (int i = 0; i < sizeX; i++) // 열 할당
	{
		map[i] = new int[sizeY];
	}

	for (int i = 0; i < sizeX; i++)
	{
		for (int j = 0; j < sizeY; j++)
		{
			map[i][j] = 0;
		}
	}
	for (int i = 0; i < 2000; i++)
	{
		map[oob_positions[i].x][oob_positions[i].y] = 1;
	}

}

void Astar::Map::Copy(Map* _map)
{
	sizeX = _map->sizeX;
	sizeY = _map->sizeY;

	for (int i = 0; i < sizeX ; i++)
	{
		for (int j = 0; j < sizeY; j++)
		{
			map[i][j] = _map->map[i][j];
		}
	}
}

Astar::Map::~Map()
{
	for (int i = 0; i < sizeX ; i++)
	{
		delete[] map[i]; 
	}
	delete[] map; 
}

void Astar::Map::PrintMap()
{
	for (int i = 0; i < sizeX; i++)
	{
		for (int j = 0; j < sizeY; j++)
		{
			printf("%d ", map[i][j]);
		}
		printf("\n");
	}
}


list<Astar::Coordinate*> Astar::FindPath(Map* Navi, Coordinate StartPoint, Coordinate EndPoint) 
{

	list<Node*> OpenNode; 
	list<Node*> CloseNode; 
	Node* SNode; 
	list<Coordinate*> path;

	OpenNode.push_back(new Node(StartPoint.x, StartPoint.y, NULL, EndPoint)); 

	list<Node*>::iterator iter;

	while ((OpenNode.end() != OpenNode.begin()) && (OpenNode.end() == FindCoordNode(EndPoint.x, EndPoint.y, &OpenNode)))
	{
		iter = FindNextNode(&OpenNode); 
		SNode = *iter; 
				  
		ExploreNode(Navi, SNode, &OpenNode, &CloseNode, EndPoint);

		CloseNode.push_back(SNode); 
		OpenNode.erase(iter);
	}

	if ((OpenNode.end() != OpenNode.begin())) 
	{
		iter = FindCoordNode(EndPoint.x, EndPoint.y, &OpenNode); 
		for (SNode = *iter; SNode->pParent != NULL; SNode = SNode->pParent)  
		{
			path.push_back(new Coordinate(SNode->point.x, SNode->point.y));
		}	path.push_back(new Coordinate(SNode->point.x, SNode->point.y));

		path.reverse(); 

		
		iter = OpenNode.begin();
		for (;iter != OpenNode.end(); iter++)
		{
			delete *iter; 
		}
		iter = CloseNode.begin();
		for (; iter != CloseNode.end(); iter++)
		{
			delete *iter; 
		}

		return path; 
	}


	iter = CloseNode.begin();
	for (; iter != CloseNode.end(); iter++)
	{
		delete *iter; 
	}
	return path; 

}

void Astar::ExploreNode(Map* Navi, Node* SNode, list<Node*>* OpenNode, list<Node*>* CloseNode, Coordinate EndPoint)
{
	bool up = true, right = true, down = true, left = true; 
	list<Node*>::iterator iter;
	POINT point;


	point.x = SNode->point.x - 1;	point.y = SNode->point.y;
	if (SNode->point.x > 0 && Navi->map[point.x][point.y] == 0) 
	{

		up = false;


		if (OpenNode->end() != FindCoordNode(point.x, point.y, OpenNode))
		{
			iter = FindCoordNode(point.x, point.y, OpenNode);
			if ((*iter)->G > (SNode->G + 10))  
			{
				(*iter)->pParent = SNode; 
			}
		}


		else if (CloseNode->end() != FindCoordNode(point.x, point.y, CloseNode))
		{
		}

		else
		{
			OpenNode->push_back(new Node(point.x, point.y, SNode, EndPoint));
		}
	}

	point.x = SNode->point.x;	point.y = SNode->point.y + 1;
	if (SNode->point.y < (Navi->sizeY - 1) && Navi->map[point.x][point.y] == 0) 
	{

		right = false;

		if (OpenNode->end() != FindCoordNode(point.x, point.y, OpenNode))
		{
			iter = FindCoordNode(point.x, point.y, OpenNode);
			if ((*iter)->G > (SNode->G + 10))  
			{
				(*iter)->pParent = SNode; 
			}
		}

		else if (CloseNode->end() != FindCoordNode(point.x, point.y, CloseNode))
		{
		}

		else
		{
			OpenNode->push_back(new Node(point.x, point.y, SNode, EndPoint));
		}
	}

	point.x = SNode->point.x + 1;	point.y = SNode->point.y;
	if (SNode->point.x < (Navi->sizeX - 1) && Navi->map[point.x][point.y] == 0) 
	{

		down = false;

		if (OpenNode->end() != FindCoordNode(point.x, point.y, OpenNode))
		{
			iter = FindCoordNode(point.x, point.y, OpenNode);
			if ((*iter)->G > (SNode->G + 10)) 
			{
				(*iter)->pParent = SNode; 
			}
		}

		else if (CloseNode->end() != FindCoordNode(point.x, point.y, CloseNode))
		{
		}

		else
		{
			OpenNode->push_back(new Node(point.x, point.y, SNode, EndPoint));
		}
	}

	point.x = SNode->point.x;	point.y = SNode->point.y - 1;
	if (SNode->point.y > 0 && Navi->map[point.x][point.y] == 0) 
	{
		left = false;

		if (OpenNode->end() != FindCoordNode(point.x, point.y, OpenNode))
		{
			iter = FindCoordNode(point.x, point.y, OpenNode);
			if ((*iter)->G > (SNode->G + 10)) 
			{
				(*iter)->pParent = SNode; 
			}
		}

		else if (CloseNode->end() != FindCoordNode(point.x, point.y, CloseNode))
		{
		}

		else
		{
			OpenNode->push_back(new Node(point.x, point.y, SNode, EndPoint));
		}
	}

	point.x = SNode->point.x - 1;	point.y = SNode->point.y + 1;
	if (SNode->point.x > 0 && SNode->point.y < (Navi->sizeY - 1) && Navi->map[point.x][point.y] == 0 &&
		up == false && right == false) 
	{

		if (OpenNode->end() != FindCoordNode(point.x, point.y, OpenNode))
		{
			iter = FindCoordNode(point.x, point.y, OpenNode);
			if ((*iter)->G > (SNode->G + 14))  
			{
				(*iter)->pParent = SNode; 
			}
		}

		else if (CloseNode->end() != FindCoordNode(point.x, point.y, CloseNode))
		{
		}


		else
		{
			OpenNode->push_back(new Node(point.x, point.y, SNode, EndPoint));
		}
	}

	point.x = SNode->point.x + 1;	point.y = SNode->point.y + 1;
	if (SNode->point.x < (Navi->sizeX - 1) && SNode->point.y < (Navi->sizeY - 1) &&
		Navi->map[point.x][point.y] == 0 && right == false && down == false)

	{

		if (OpenNode->end() != FindCoordNode(point.x, point.y, OpenNode))
		{
			iter = FindCoordNode(point.x, point.y, OpenNode);
			if ((*iter)->G > (SNode->G + 14)) 
			{
				(*iter)->pParent = SNode; 
			}
		}


		else if (CloseNode->end() != FindCoordNode(point.x, point.y, CloseNode))
		{
		}


		else
		{
			OpenNode->push_back(new Node(point.x, point.y, SNode, EndPoint));
		}
	}

	point.x = SNode->point.x + 1;	point.y = SNode->point.y - 1;
	if (SNode->point.x < (Navi->sizeX - 1) && SNode->point.y > 0 && Navi->map[point.x][point.y] == 0 &&
		left == false && down == false) 
	{

		if (OpenNode->end() != FindCoordNode(point.x, point.y, OpenNode))
		{
			iter = FindCoordNode(point.x, point.y, OpenNode);
			if ((*iter)->G > (SNode->G + 14))
			{
				(*iter)->pParent = SNode; 
			}
		}


		else if (CloseNode->end() != FindCoordNode(point.x, point.y, CloseNode))
		{
		}


		else
		{
			OpenNode->push_back(new Node(point.x, point.y, SNode, EndPoint));
		}
	}

	point.x = SNode->point.x - 1;	point.y = SNode->point.y - 1;
	if (SNode->point.x > 0 && SNode->point.y > 0 && Navi->map[point.x][point.y] == 0 &&
		left == false && up == false) 
	{

		if (OpenNode->end() != FindCoordNode(point.x, point.y, OpenNode))
		{
			iter = FindCoordNode(point.x, point.y, OpenNode);
			if ((*iter)->G > (SNode->G + 14))   
			{
				(*iter)->pParent = SNode; 
			}
		}


		else if (CloseNode->end() != FindCoordNode(point.x, point.y, CloseNode))
		{
		}


		else
		{
			OpenNode->push_back(new Node(point.x, point.y, SNode, EndPoint));
		}
	}
}

list<Astar::Node*>::iterator Astar::FindNextNode(list<Astar::Node*>* pOpenNode) 
{
	list<Node*>::iterator iter = (*pOpenNode).begin();

	int minValue = 2000000000; 
	int order = 0; 

	for (int i = 1; iter != (*pOpenNode).end(); i++, iter++)
	{
		if ((*iter)->F <= minValue) 
		{
			minValue = (*iter)->F;
			order = i;
		}
	}

	iter = (*pOpenNode).begin();
	for (int i = 1; i < order; i++)
	{
		iter++;
	}

	return iter;
}

list<Astar::Node*>::iterator Astar::FindCoordNode(int _x, int _y, list<Astar::Node*>* NodeList) 
{
	list<Astar::Node*>::iterator iter = NodeList->begin();
	
	for (int i = 1; iter != NodeList->end(); i++, iter++)
	{
		if ((*iter)->point.x == _x && (*iter)->point.y == _y)
		{
			return iter;
		}
	}

	return NodeList->end();
}

void Astar::FindPath()
{
	path = FindPath(&Navi, StartPoint, EndPoint);
	iter = path.begin(); 
}

Astar::Coordinate Astar::GetPos(int order)
{
	Coordinate pos;
	for (int i = 1; i < order; i++)
	{
		iter++;
	}
	pos.x = (*iter)->x;
	pos.y = (*iter)->y;
	iter = path.begin();
	return pos;
}

void Astar::SetFree(int _x, int _y)
{
	Navi.map[_x][_y] = 0;
}

void Astar::SetObstacle(int _x, int _y)
{
	Navi.map[_x][_y] = 1;
}

void Astar::PrintPath()
{
	for (int i = 0; iter != path.end(); iter++)
	{
		cout << (*iter)->x << (*iter)->y << endl;
	}
	iter = path.begin(); 
}

void Astar::PrintMap()
{
	Navi.PrintMap();
}

void Astar::PrintNavi()
{
	printNavi.Copy(&Navi);

	for (int i = 0; iter != path.end(); iter++) 
	{
		printNavi.map[(*iter)->x][(*iter)->y] = 7;
	}
	iter = path.begin(); 

	printNavi.PrintMap();
}